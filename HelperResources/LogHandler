#!/bin/bash

# LogHandler for SetupHelper
# contains a functions and variables necessare=y to write to and output logs
#
# Refer to the SetupHelper ReadMe file for details on how to use these resources
#
# it is sourced by CommonResources and reinstall Mods
#
# there may be two logs associated with a setup script:
# the script helper log and optionally the package log
# logs are written to both places and additionally the command line if not running from reinstallMods

setupLogFile="/var/log/SetupHelper"

# enable logging to console
# scripts can disable logging by setting 
# logToConsole to false AFTER sourcing LogHandler
logToConsole=true

# output the last 100 lines of the log file to the console
# the full path to the log file should be passed in $1
# converts the tai64 time stamp to human readable form
#
# $1 specifies the path to the log file
#   $setupLogFile
#   $packageLogFile is defined to point to the log file of the package if it exists

displayLog ()
{
    if [ ! -z "$1" ]; then
        if [ -f "$1" ]; then
            tail -100 "$1" | tai64nlocal
        else
            echo "no log File $1 found"
        fi
    else
        echo "no log File specified"
    fi
}


# write a message to one or more log files

logMessage ()
{
    # to console
    if $logToConsole ; then
        echo "$*"
    fi

    # to setup helper log
    if [ ! -z $setupLogFile ]; then
        echo "$shortScriptName: $*" | tai64n >> $setupLogFile
    fi

     # to setup helper log
    if [ ! -z $packageLogFile ]; then
        # no log file yet - make enclosing directory
        # if directory already exists mkdir will do nothing (silently)
        if [ ! -f "$packageLogFile" ]; then
            mkdir -p $(dirname "$packageLogFile")
        fi
        echo "$shortScriptName: $*" | tai64n >> $packageLogFile
    fi
}


# truncates the log file if it's larger than 2000 lines
# it is called from the initialization code in CommonResources
# if NOT running at boot time

pruneSetupLogFile ()
{
    if [ $(wc -l $setupLogFile | awk '{print $1}') -gt 2000 ]; then
        tail -1000 $setupLogFile > $setupLogFile.tmp
        mv $setupLogFile.tmp $setupLogFile
        logMessage "log file truncated to last 1000 lines"
    fi
}
